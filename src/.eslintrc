{
  "env": {
    "browser": true,
    "node": true,
    "es6": true
  },

  "parser": "babel-eslint",

  "plugins": ["react"],

  "ecmaFeatures": {
    "arrowFunctions": true,
    "binaryLiterals": true,
    "blockBindings": true,
    "classes": true,
    "defaultParams": true,
    "destructuring": true,
    "forOf": true,
    "generators": true,
    "modules": true,
    "objectLiteralComputedProperties": true,
    "objectLiteralDuplicateProperties": true,
    "objectLiteralShorthandMethods": true,
    "objectLiteralShorthandProperties": true,
    "octalLiterals": true,
    "regexUFlag": true,
    "regexYFlag": true,
    "spread": true,
    "superInFunctions": true,
    "templateStrings": true,
    "unicodeCodePointEscapes": true,
    "globalReturn": true,
    "jsx": true
  },

  "rules": {
    //
    //Possible Errors
    //
    // The following rules point out areas where you might have made mistakes.
    //
    "comma-dangle": 2, // disallow or enforce trailing commas
    "no-cond-assign": 2, // disallow assignment in conditional expressions
    "no-console": 2, // disallow use of console (off by default in the node environment)
    "no-constant-condition": 2, // disallow use of constant expressions in conditions
    "no-control-regex": 2, // disallow control characters in regular expressions
    "no-debugger": 2, // disallow use of debugger
    "no-dupe-args": 2, // disallow duplicate arguments in functions
    "no-dupe-keys": 2, // disallow duplicate keys when creating object literals
    "no-duplicate-case": 2, // disallow a duplicate case label.
    "no-empty-character-class": 2, //disallow the use of empty character classes in regular expressions
    "no-empty": 2, // disallow empty statements
    "no-ex-assign": 2, // disallow assigning to the exception in a catch block
    "no-extra-boolean-cast": 2, // disallow double-negation boolean casts in a boolean context
    "no-extra-parens": 0, // disallow unnecessary parentheses
    "no-extra-semi": 2, // disallow unnecessary semicolons
    "no-func-assign": 2, // disallow overwriting functions written as function declarations
    "no-inner-declarations": 2, // disallow function or variable declarations in nested blocks
    "no-invalid-regexp": 2, // disallow invalid regular expression strings in the RegExp constructor
    "no-irregular-whitespace": 2, // disallow irregular whitespace outside of strings and comments
    "no-negated-in-lhs": 2, // disallow negation of the left operand of an in expression
    "no-obj-calls": 2, // disallow the use of object properties of the global object (Math and JSON) as functions
    "no-regex-spaces": 2, // disallow multiple spaces in a regular expression literal
    "no-sparse-arrays": 2, // disallow sparse arrays
    "no-unreachable": 2, // disallow unreachable statements after a return, throw, continue, or break statement
    "use-isnan": 2, // disallow comparisons with the value NaN
    "valid-jsdoc": 2, // Ensure JSDoc comments are valid
    "valid-typeof": 2, // Ensure that the results of typeof are compared against a valid string
    "no-unexpected-multiline": 2, // Avoid code that looks like two expressions but is actually one


    //
    // Best Practices
    //
    // These are rules designed to prevent you from making mistakes.
    // They either prescribe a better way of doing something or help you avoid footguns.
    //
    "accessor-pairs": 2, // Enforces getter/setter pairs in objects
    "block-scoped-var": 0, // treat var statements as if they were block scoped. 0: deep destructuring is not compatible https://github.com/eslint/eslint/issues/1863
    "complexity": 0, // specify the maximum cyclomatic complexity allowed in a program
    "consistent-return": 2, // require return statements to either always or never specify values
    "curly": 2, // specify curly brace conventions for all control statements
    "default-case": 2, // require default case in switch statements
    "dot-notation": 2, // encourages use of dot notation whenever possible
    "dot-location": [2, "property"], // enforces consistent newlines before or after dots
    "eqeqeq": 2, // require the use of === and !==
    "guard-for-in": 2, // make sure for-in loops have an if statement
    "no-alert": 2, // disallow the use of alert, confirm, and prompt
    "no-caller": 2, // disallow use of arguments.caller or arguments.callee
    "no-div-regex": 2, // disallow division operators explicitly at beginning of regular expression
    "no-else-return": 2, // disallow else after a return in an if
    "no-empty-label": 2, // disallow use of labels for anything other than loops and switches
    "no-eq-null": 2, // disallow comparisons to null without a type-checking operator
    "no-eval": 2, // disallow use of eval()
    "no-extend-native": 2, // disallow adding to native types
    "no-extra-bind": 2, // disallow unnecessary function binding
    "no-fallthrough": 2, // disallow fallthrough of case statements
    "no-floating-decimal": 2, // disallow the use of leading or trailing decimal points in numeric literals
    "no-implicit-coercion": [2, {"boolean": false, "number": true, "string": true}], // disallow the type conversions with shorter notations
    "no-implied-eval": 2, // disallow use of eval()-like methods
    "no-invalid-this": 2, // disallow this keywords outside of classes or class-like objects
    "no-iterator": 2, // disallow usage of __iterator__ property
    "no-labels": 2, // disallow use of labeled statements
    "no-lone-blocks": 2, // disallow unnecessary nested blocks
    "no-loop-func": 2, // disallow creation of functions within loops
    "no-multi-spaces": 2, // disallow use of multiple spaces
    "no-multi-str": 2, // disallow use of multiline strings
    "no-native-reassign": 2, // disallow reassignments of native objects
    "no-new-func": 2, // disallow use of new operator for Function object
    "no-new-wrappers": 2, // disallows creating new instances of String,Number, and Boolean
    "no-new": 2, // disallow use of the new operator when not part of an assignment or comparison
    "no-octal-escape": 2, // disallow use of octal escape sequences in string literals, such as var foo = "Copyright \251";
    "no-octal": 2, // disallow use of octal literals
    "no-param-reassign": 2, // disallow reassignment of function parameters
    "no-process-env": 0, // disallow use of process.env
    "no-proto": 2, // disallow usage of __proto__ property
    "no-redeclare": 2, // disallow declaring the same variable more than once
    "no-return-assign": 2, // disallow use of assignment in return statement
    "no-script-url": 2, // disallow use of javascript: urls.
    "no-self-compare": 2, // disallow comparisons where both sides are exactly the same
    "no-sequences": 2, // disallow use of the comma operator
    "no-throw-literal": 2, // restrict what can be thrown as an exception
    "no-unused-expressions": 2, // disallow usage of expressions in statement position
    "no-useless-call": 2, // disallow unnecessary .call() and .apply()
    "no-useless-concat": 2, // disallow unnecessary concatenation of literals or template literals
    "no-void": 2, // disallow use of the void operator
    "no-warning-comments": [0, {"terms": ["todo", "fixme"], "location": "start"}], // disallow usage of configurable warning terms in comments": 2, // e.g. TODO or FIXME
    "no-with": 2, // disallow use of the with statement
    "radix": 2, // require use of the second argument for parseInt()
    "vars-on-top": 2, // require declaration of all vars at the top of their containing scope
    "wrap-iife": 2, // require immediate function invocation to be wrapped in parentheses
    "yoda": 2, // require or disallow Yoda conditions


    //
    // Strict Mode
    //
    // These rules relate to using strict mode.
    //
    "strict": [2, "never"], // controls location of Use Strict Directives. 0: required by `babel-eslint`


    //
    // Variables
    //
    // These rules have to do with variable declarations.
    //
    "init-declarations": 0, // enforce or disallow variable initializations at definition
    "no-catch-shadow": 2, // disallow the catch clause parameter name being the same as a variable in the outer scope
    "no-delete-var": 2, // disallow deletion of variables
    "no-label-var": 2, // disallow labels that share a name with a variable
    "no-shadow-restricted-names": 2, // disallow shadowing of names such as arguments
    "no-shadow": 2, // disallow declaration of variables already declared in the outer scope
    "no-undef-init": 2, // disallow use of undefined when initializing variables
    "no-undef": 2, // disallow use of undeclared variables unless mentioned in a /*global */ block
    "no-undefined": 2, // disallow use of undefined variable
    "no-unused-vars": 2, // disallow declaration of variables that are not used in the code
    "no-use-before-define": 2, // disallow use of variables before they are defined

    //
    // Node.js and CommonJS
    //
    // These rules are specific to JavaScript running on Node.js or using CommonJS in the browser.
    //
    "callback-return": 2, // enforce return after a callback
    "global-require": 0, // disallow require() outside of the top-level module scope
    "handle-callback-err": 2, // enforce error handling in callbacks
    "no-mixed-requires": 2, // disallow mixing regular variable and require declarations
    "no-new-require": 2, // disallow use of new operator with the require function
    "no-path-concat": 2, // disallow string concatenation with __dirname and __filename
    "no-process-exit": 0, // disallow process.exit()
    "no-restricted-modules": 0, // restrict usage of specified node modules
    "no-sync": 0, // disallow use of synchronous methods


    //
    //Stylistic Issues
    //
    // These rules are purely matters of style and are quite subjective.
    //
    "array-bracket-spacing": [2, "never"], // enforce spacing inside array brackets
    "block-spacing": [2, "always"], // disallow or enforce spaces inside of single line blocks
    "brace-style": 2, // enforce one true brace style
    "camelcase": 2, // require camel case names
    "comma-spacing": [2, {"before": false, "after": true}], // enforce spacing before and after comma
    "comma-style": [2, "last"], // enforce one true comma style
    "computed-property-spacing": [2, "never"], //require or disallow padding inside computed properties
    "consistent-this": [2, "_this"], // enforce consistent naming when capturing the current execution context
    "eol-last": 2, // enforce newline at the end of file, with no multiple empty lines
    "func-names": 0, // require function expressions to have a name
    "func-style": 0, // enforce use of function declarations or expressions
    "id-length": 0, // this option enforces minimum and maximum identifier lengths (variable names, property names etc.)
    "id-match": 0, // require identifiers to match the provided regular expression
    "indent": [2, 2, {"SwitchCase": 1}], // specify tab or space width for your code (fixable)
    "jsx-quotes": [2, "prefer-double"], // specify whether double or single quotes should be used in JSX attributes
    "key-spacing": [2, {"beforeColon": false, "afterColon": true}], // enforce spacing between keys and values in object literal properties
    "lines-around-comment": [2, {"beforeBlockComment": true, "afterBlockComment": false, "afterLineComment": false}], // enforces empty lines around comments
    "linebreak-style": [2, "unix"], //disallow mixed 'LF' and 'CRLF' as linebreaks
    "max-nested-callbacks": [2, 3], // specify the maximum depth callbacks can be nested
    "new-cap": [2, {"newIsCap": true, "capIsNew": false}], // require a capital letter for constructors
    "new-parens": 2, // disallow the omission of parentheses when invoking a constructor with no arguments
    "newline-after-var": [2, "always"], // require or disallow an empty newline after variable declarations
    "no-array-constructor": 2, // disallow use of the Array constructor
    "no-continue": 2, //disallow use of the continue statement
    "no-inline-comments": 2, // disallow comments inline after code
    "no-lonely-if": 2, // disallow if as the only statement in an else block
    "no-mixed-spaces-and-tabs": 2, // disallow mixed spaces and tabs for indentation
    "no-multiple-empty-lines": [2, {"max": 2}], // disallow multiple empty lines
    "no-nested-ternary": 2, // disallow nested ternary expressions
    "no-new-object": 2, // disallow use of the Object constructor
    "no-restricted-syntax": [2, "WithStatement"], // disallow use of certain syntax in code
    "no-spaced-func": 2, // disallow space between function identifier and application
    "no-ternary": 0, // disallow the use of ternary operators
    "no-trailing-spaces": 2, // disallow trailing whitespace at the end of lines
    "no-underscore-dangle": 2, // disallow dangling underscores in identifiers
    "no-unneeded-ternary": 2, // disallow the use of ternary operators when a simpler alternative exists
    "object-curly-spacing": [2, "never"], // require or disallow padding inside curly braces
    "one-var": [2, "never"], // require or disallow one variable declaration per function
    "operator-assignment": [2, "never"], // require assignment operator shorthand where possible or prohibit it entirely
    "operator-linebreak": [2, "after"], // enforce operators to be placed before or after line breaks
    "padded-blocks": [2, "never"], // enforce padding within blocks
    "quote-props": [2, "as-needed"], // require quotes around object literal property names
    "quotes": [2, "single"], // specify whether backticks, double or single quotes should be used (fixable)
    "require-jsdoc": 0, // Require JSDoc comment
    "semi-spacing": [2, {"before": false, "after": true}], // enforce spacing before and after semicolons
    "semi": [2, "always"], // require or disallow use of semicolons instead of ASI
    "sort-vars": 0, // sort variables within the same declaration block
    "space-after-keywords": [2, "always"], // require a space after certain keywords
    "space-before-keywords": [2, "always"], // require a space before certain keywords (fixable)
    "space-before-blocks": [2, "always"], // require or disallow a space before blocks
    "space-before-function-paren": [2, {"anonymous": "always", "named": "never"}], // require or disallow a space before function opening parenthesis
    "space-in-parens": [2, "never"], // require or disallow spaces inside parentheses
    "space-infix-ops": 2, // require spaces around operators
    "space-return-throw-case": 2, // require a space after return, throw, and case
    "space-unary-ops": [2, {"words": true, "nonwords": false}], // require or disallow spaces before/after unary operators (words on by default, nonwords off by default)
    "spaced-comment": [2, "always"], //require or disallow a space immediately following the // or /* in a comment
    "wrap-regex": 0, // require regex literals to be wrapped in parentheses


    //
    // ECMAScript 6
    //
    // These rules are only relevant to ES6 environments and are off by default.
    //

    "arrow-parens": [2, "as-needed"], // require parens in arrow function arguments
    "arrow-spacing": 2, // require space before/after arrow function's arrow
    "constructor-super": 2, // verify calls of super() in constructors
    "generator-star-spacing": [2, "before"], // enforce the spacing around the * in generator functions
    "no-class-assign": 2, // disallow modifying variables of class declarations
    "no-const-assign": 2, // disallow modifying variables that are declared using const
    "no-dupe-class-members": 2, // disallow duplicate name in class members
    "no-this-before-super": 2, // disallow use of this/super before calling super() in constructors.
    "no-var": 2, // require let or const instead of var
    "object-shorthand": 2, // require method and property shorthand syntax for object literals
    "prefer-arrow-callback": 2, // suggest using arrow functions as callbacks
    "prefer-const": 2, // suggest using of const declaration for variables that are never modified after declared
    "prefer-spread": 2, // suggest using the spread operator instead of .apply().
    "prefer-reflect": 0, // suggest using Reflect methods where applicable
    "prefer-template": 2, // suggest using template literals instead of strings concatenation
    "require-yield": 2, // disallow generator functions that do not have yield


    //
    // Legacy
    //
    // The following rules are included for compatibility with JSHint and JSLint.
    // While the names of the rules may not match up with the JSHint/JSLint counterpart,
    // the functionality is the same.
    //
    "max-depth": [2, 3], // specify the maximum depth that blocks can be nested
    "max-len": [2, 100, 2], // specify the maximum length of a line in your program
    "max-params": [2, 5], // limits the number of parameters that can be used in the function declaration.
    "max-statements": 0, // specify the maximum number of statement allowed in a function
    "no-bitwise": 0, // disallow use of bitwise operators
    "no-plusplus": 2, // disallow use of unary operators, ++ and --


    //
    // eslint-plugin-react
    //
    // React specific linting rules for ESLint
    //
    "react/display-name": 0, // Prevent missing displayName in a React component definition
    "react/jsx-boolean-value": [2, "always"], // Enforce boolean attributes notation in JSX
    "react/jsx-no-undef": 2, // Disallow undeclared variables in JSX
    "react/jsx-sort-prop-types": 0, // Enforce propTypes declarations alphabetical sorting
    "react/jsx-sort-props": 0, // Enforce props alphabetical sorting
    "react/jsx-uses-react": 2, // Prevent React to be incorrectly marked as unused
    "react/jsx-uses-vars": 2, // Prevent variables used in JSX to be incorrectly marked as unused
    "react/no-did-mount-set-state": 2, // Prevent usage of setState in componentDidMount
    "react/no-did-update-set-state": 2, // Prevent usage of setState in componentDidUpdate
    "react/no-multi-comp": 0, // Prevent multiple component definition per file
    "react/no-unknown-property": 2, // Prevent usage of unknown DOM property
    "react/prop-types": 2, // Prevent missing props validation in a React component definition
    "react/react-in-jsx-scope": 2, // Prevent missing React when using JSX
    "react/require-extension": [1, { "extensions": [".js"] }], // Restrict file extensions that may be required
    "react/self-closing-comp": 2, // Prevent extra closing tags for components without children
    "react/wrap-multilines": 2, // Prevent missing parentheses around multilines JSX
    "react/sort-comp": 2 // Enforce component methods order (sort-comp)
  }
}
